"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),f=a,y=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},59881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:1},i="Intro",s={unversionedId:"intro",id:"intro",title:"Intro",description:"ByteNet is an advanced networking library targeted at devs who want way more granular control over their networking. It sends solely buffers through RemoteEvents, w/ automatic queueing functionality, and has built-in serialization and deserialization. This means you basically just don't have to worry about optimization when using ByteNet!",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/ByteNet/docs/intro",draft:!1,editUrl:"https://github.com/ffrostflame/bytenet/edit/master/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",next:{title:"Installation",permalink:"/ByteNet/docs/Installation"}},c={},l=[{value:"Packets",id:"packets",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"intro"},"Intro"),(0,a.kt)("p",null,"ByteNet is an advanced networking library targeted at devs who want way more granular control over their networking. It sends solely buffers through RemoteEvents, w/ automatic queueing functionality, and has built-in serialization and deserialization. This means you basically just don't have to worry about optimization when using ByteNet!"),(0,a.kt)("h2",{id:"packets"},"Packets"),(0,a.kt)("p",null,"ByteNet is built off an object called a ",(0,a.kt)("inlineCode",{parentName:"p"},"packet"),". These packets have a clear and unchanging structure. You create packets by using ",(0,a.kt)("inlineCode",{parentName:"p"},"definePacket"),", then use the ",(0,a.kt)("inlineCode",{parentName:"p"},"send")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"listen")," methods to send and receive networked information. You send, and receive these packets as dictionaries; key-value pairs. But don't worry! The keys are serialized away, they don't affect performance or packet size ",(0,a.kt)("strong",{parentName:"p"},"at all.")))}d.isMDXComponent=!0}}]);