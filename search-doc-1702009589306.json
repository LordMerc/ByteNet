[{"title":"Intro","type":0,"sectionRef":"#","url":"/ByteNet/docs/intro","content":"","keywords":""},{"title":"Packets​","type":1,"pageTitle":"Intro","url":"/ByteNet/docs/intro#packets","content":"ByteNet is built off an object called a packet. These packets have a clear and unchanging structure. You create packets by using definePacket, then use the send and listen methods to send and receive networked information. You send, and receive these packets as dictionaries; key-value pairs. But don't worry! The keys are serialized away, they don't affect performance or packet size at all. "},{"title":"Installation","type":0,"sectionRef":"#","url":"/ByteNet/docs/Installation","content":"","keywords":""},{"title":"Through Wally [Recommended]​","type":1,"pageTitle":"Installation","url":"/ByteNet/docs/Installation#through-wally-recommended","content":"If you're using Wally, you can simply drop this snippet in, except replace latest with the latest ByteNet version. wally.toml [dependencies] ByteNet = &quot;ffrostflame/bytenet@latest&quot;  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/ByteNet/docs/Tutorials/Getting Started","content":"","keywords":""},{"title":"Your first Packet​","type":1,"pageTitle":"Getting Started","url":"/ByteNet/docs/Tutorials/Getting Started#your-first-packet","content":"To actually make use of ByteNet, you'll first need to create a packet. Packets require a structure like so: local ByteNet = require(path.to.ByteNet) local myPacket = ByteNet.definePacket({ textField = ByteNet.dataTypes.string, })  You might've noticed this, but you don't provide ByteNet a name. What gives? ByteNet is built around your networking structures being shared. Instead of relying on a name, ByteNet relies on your packet structure. So you'll want to create a ModuleScript under ReplicatedStorage to store your packets, instead of relying on individual scripts. For example: -- under ReplicatedStorage local ByteNet = require(path.to.ByteNet) return { myPacket = ByteNet.definePacket(&quot;reliable&quot;, { textField = ByteNet.dataTypes.string, }) }  Great! Now we have a packet. Luckily, utilizing packets in ByteNet is extremely simple: -- On the server... local ByteNet = require(path.to.ByteNet) local packets = require(path.to.packets) packets.myPacket:listen(function(data, player) print(`{ player.Name } said {data.textField}`) end) -- On the client.. local ByteNet = require(path.to.ByteNet) local packets = require(path.to.packets) packets.myPacket:send({ textField = &quot;Hello, world!&quot; })  "},{"title":"ByteNet","type":0,"sectionRef":"#","url":"/ByteNet/api/ByteNet","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ByteNet","url":"/ByteNet/api/ByteNet#types","content":" "},{"title":"DataType​","type":1,"pageTitle":"ByteNet","url":"/ByteNet/api/ByteNet#DataType","content":"&lt;/&gt; type DataType = [arbitrary] Declares the type of data of a field.  "},{"title":"dataTypes​","type":1,"pageTitle":"ByteNet","url":"/ByteNet/api/ByteNet#dataTypes","content":"&lt;/&gt; interface dataTypes { string: DataType uint8: DataType int8: DataType uint16: DataType int16: DataType uint32: DataType int32: DataType f32: DataType f64: DataType v3: DataType bool: DataType }  "},{"title":"Functions​","type":1,"pageTitle":"ByteNet","url":"/ByteNet/api/ByteNet#functions","content":" "},{"title":"definePacket​","type":1,"pageTitle":"ByteNet","url":"/ByteNet/api/ByteNet#definePacket","content":"&lt;/&gt; ByteNet.definePacket( reliabilityType: &quot;reliable&quot; | &quot;unreliable&quot;, structure: {[string]: DataType} ) → Packet  "},{"title":"Packet","type":0,"sectionRef":"#","url":"/ByteNet/api/Packet","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Packet","url":"/ByteNet/api/Packet#functions","content":" "},{"title":"sendToAll​","type":1,"pageTitle":"Packet","url":"/ByteNet/api/Packet#sendToAll","content":"This item only works when running on the server. Server &lt;/&gt; Packet:sendToAll(data: {[string]: any}) → () Sends data to all players.  "},{"title":"send​","type":1,"pageTitle":"Packet","url":"/ByteNet/api/Packet#send","content":"&lt;/&gt; Packet:send( data: {[string]: any}, target: Player? ) → () If on the client, sends data to the server. If on the server, sends data to a specific player.  "},{"title":"listen​","type":1,"pageTitle":"Packet","url":"/ByteNet/api/Packet#listen","content":"&lt;/&gt; Packet:listen(callback: ( data: {[string]: any}, player: Player ) → ()) → () When the packet is received, the callback is called with the data, and if on the server, the player who sent the packet. "}]